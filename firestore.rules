rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
  
    function verifyFields(required, optional) {
        return request.resource.data.keys().hasAll(required) && request.resource.data.keys().hasOnly( required.concat(optional) );
    }

  	// **** SITE ****
  	match /sites/{site} {

        function userPath() {
            return /databases/$(database)/documents/sites/$(site)/members/$(request.auth.uid);
        }      

        function user() {
            return get( userPath() );
        }
        
        function isSiteOwner() {
            return user().data.site_owner;
        }

        // if user belongs to site
        allow read: if exists( userPath() ) || existsAfter( userPath() );
        
        allow create: if
            verifyFields([], ["title"])
            &&
            getAfter( userPath() ).data.site_owner == true;

        allow update: if isSiteOwner(); // and schema

        allow delete: if isSiteOwner();
        

        //.data.capabilities[ user().data.role ] .data.roles[ user().data.role ].capabilities.read

        // ******************** //
        // *** CONTENT TYPE *** //
        // ******************** //
        match /content/{content} { // posts, pages, etc.
        
            function content() {                	
                return get( /databases/$(database)/documents/sites/$(site)/content/$(content) );
            }            

            allow read: if isSiteOwner() || resource.data.roles[ user().data.role ].capabilities.read || debug(resource) == true;

            allow write: if isSiteOwner(); // posts, pages, etc.   
            
            // *** ITEMS ***
            // /content/{content}/items/{item}
            match /items/{item} {

                // Required fields:
                // 'createdAt'
                // 'updatedAt'
                // 'author'

                allow read: if ( isSiteOwner() || content().data.roles[ user().data.role ].capabilities.read);

                allow create:   if
                    // Check required fields 'createdAt' and 'author'
                    request.resource.data.keys().hasAll(["createdAt", "updatedAt","author"])
                    &&
                    
                    // Validate 'createdAt'
                    request.resource.data.createdAt == request.time
                    &&
                    // Validate 'updatedAt'
                    request.resource.data.updatedAt == request.time
                    &&                                

                    // Validate 'author', check if user exits and is member of this site
                    request.resource.data.author is path 
                    &&
                    request.resource.data.author[3] == 'users'
                    &&
                    // 
                    exists( request.resource.data.author ) && exists( /databases/$(database)/documents/sites/$(site)/members/$(request.resource.data.author[4]) )

                    &&
                    (
                        // Allow create if user is siteOwner
                        isSiteOwner()
                        ||
                        // Or if has the capabilities
                        content().data.roles[ user().data.role ].capabilities.edit_others
                        ||
                        // Or if owns this post
                        (content().data.roles[ user().data.role ].capabilities.edit && request.resource.data.author == /databases/$(database)/documents/users/$(request.auth.uid) )
                    ); 


                allow update:   if
                    // Prevent update 'createdAt' field
                    request.resource.data.diff(resource.data).unchangedKeys().hasAny(["createdAt"])
                    &&

                    // Check required fields 'updatedAt'
                    request.resource.data.keys().hasAll(["updatedAt"])
                    &&
                    
                    // Validate 'createdAt'
                    request.resource.data.updatedAt == request.time
                    &&

                    // Validate 'author', check if user exits and is member of this site
                    request.resource.data.author is path 
                    &&
                    request.resource.data.author[3] == 'users'
                    &&                             
                    exists( request.resource.data.author ) && exists( /databases/$(database)/documents/sites/$(site)/members/$(request.resource.data.author[4]) )

                    &&
                    (
                        // Allow update if user is siteOwner
                        isSiteOwner()
                        ||
                        // Or if has the capabilities to edit post from others
                        content().data.roles[ user().data.role ].capabilities.edit_others
                        ||
                        // Or editing owned posts
                        (
                            content().data.roles[ user().data.role ].capabilities.edit
                            &&
                            request.resource.data.diff(resource.data).unchangedKeys().hasAny(["author"])
                            &&
                            resource.data.author == /databases/$(database)/documents/users/$(request.auth.uid)
                        )
                    );
                                    

                allow delete: if
                    // Allow update if user is siteOwner
                    isSiteOwner()
                    ||
                    // Or if has the capabilities to edit post from others
                    content().data.roles[ user().data.role ].capabilities.delete_others
                    ||
                    // Or deleting own post
                    (
                        content().data.roles[ user().data.role ].capabilities.delete
                        &&
                        resource.data.author == /databases/$(database)/documents/users/$(request.auth.uid)
                    );

                //  match /comments/{comment} {
                //  }              
                
            }
            
            // *** CATEGORIES ***
            // /content/{content}/categories/{category}
            match /categories/{category} {
            
                allow read: if isSiteOwner() || content().data.roles[ user().data.role ].capabilities.read;                    
                allow write: if isSiteOwner() || content().data.roles[ user().data.role ].capabilities.manage_categories; 
                
            }
        
        }
        // *** END CONTENT TYPE ***
        

        // ****************** //
        // *** SITE USERS *** //
        // ****************** //
        match /members/{user} {   // or members   
        
        // req: 'siteRef', 'userRef'. opt: 'role', 'site_owner'      
        
        allow get, list: if user() != null; // isSiteOwner() || 
        
        allow create: if
            // Check 'siteRef'
            request.resource.data.siteRef is path
            &&
            request.resource.data.siteRef == /databases/$(database)/documents/sites/$(site)
            &&

            // Check 'userRef'
            request.resource.data.userRef is path
            &&
            //request.resource.data.userRef[3] == 'users' //FIX  /databases/$(database)/documents/users/$(user)
            request.resource.data.userRef == /databases/$(database)/documents/users/$(user)
            &&
            exists( request.resource.data.userRef )
            &&

            request.resource.data.get('role', '') is string
            &&                      
            request.resource.data.get('site_owner', false) is bool
            &&

            (
                isSiteOwner() 
                ||
                (
                    // When creating a new site, must define self as site_owner
                    !exists( /databases/$(database)/documents/sites/$(site) )
                    &&
                    existsAfter( /databases/$(database)/documents/sites/$(site) )
                    &&
                    request.resource.data.site_owner == true
                    &&
                    request.auth.uid == user
                )
            )                          	                          
            &&
            verifyFields(["siteRef", "userRef"], ["role", "site_owner"] );
                        
                        
        allow update: if
            request.resource.data.diff(resource.data).unchangedKeys().hasAll(["siteRef", "userRef"])         							
            &&
            request.resource.data.get('role', '') is string
            &&                      
            request.resource.data.get('site_owner', false) is bool
            &&            
            isSiteOwner()
            &&
            (
            // prevent site owner resign
            request.auth.uid != user || request.resource.data.diff(resource.data).unchangedKeys().hasAny(["site_owner"])
            )
            &&
            verifyFields([], ["siteRef", "userRef", "role", "site_owner"] );                                           

        
        allow delete: if
            (
            isSiteOwner()
            &&
            (                        
                // site owner can delete other user from his site  
                user != request.auth.uid
                ||
                // site owner can self delete only when deleting site, to avoid orphan/unowned sites
                !existsAfter(/databases/$(database)/documents/sites/$(site))
            )
            )
            ||
            // Allow any user to opt out
            (!isSiteOwner() && user == request.auth.uid); 
            // || or admin?
        
        }
      
      
    }
    // **** END SITE ****
    

    // *******************
    // **** MEMBERS ******
    // *******************
    match /{path=**}/members/{user} { // maybe /members/{member}

      allow get: if user == request.auth.uid;
      allow list: if resource.data.userRef == /databases/$(database)/documents/users/$(request.auth.uid);    
      
    }  
  

    // *******************
    // **** ALL USERS ****
    // *******************
    match /users/{user} {
    
        allow create, update: if
            // Allow self write only, and fields must be the same as request.auth.token(email|name) content
            request.auth.uid == user
            &&
            request.resource.data.keys().hasOnly(['email', 'displayName'])
            &&
            request.resource.data.keys().hasAll(['email', 'displayName'])
            &&
            request.resource.data.email == request.auth.token.email
            &&
            request.resource.data.displayName == request.auth.token.name;
    
        allow get: if
            // Any Logged in user can get (like facebook) / But, must know the user id
            request.auth.uid != null;

        allow list: if
            // Allow only this type of query, to find user by their email: .where('email', '==', 'email@example').limit(1)
            resource.data.keys().hasAll(['email'])
            &&
            resource.data.email is string // Allow '=='. Block '>=', '<=', etc.
            &&
            request.query.orderBy.keys().hasOnly(['__name__'])            
            &&
            request.query.limit == 1;      
    }
  

    // Else block all documents.
    match /{document=**} {
      allow read, write: if false;
    }

  }

}